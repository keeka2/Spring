B -> A -> TEST
TEST 에서 new A() 에서 new B()

어노테이션: 기능성 주석(기능을 갖고 있는 주석)

dependency injection(의존성 주입)
- XML에서 bean으로 등록(의존 관계를 등록)
- 소스코드 내부가 아닌 외부에서 설정을 통해 정의되는 방식
- main>webapp>WEB-INF>spring>[servlet-context.xml & root-context.xml]

제어 반전
- 외부 라이브러리 코드가 개발자의 코드를 호출
- 원래는 라이브러리를 개발자의 코드가 호출하는 방식이였음

Plain Old Java Object(경량)
- 오래된 방식의 간단한 자바 오브젝트
- 특정 '기술'에 종속되어 동작하는 것이 아닌 순수한 자바 객체
- 진정한 POJO란 객체지향적인 원리에 충실하면서, 
  환경과 기술에 종속되지 않고 필요에 따라 재활용될 수 있는 방식으로 설계된 오브젝트?
- 되도록 상속은 받지 말것(depth - 메모리 효율?)


관점 지향 프로그래밍(AOP)
- 로깅, 트랜잭션, 보안 등 여러 모듈에서 공통적으로 사용하는 기능을 분리하여 관리할 수 있다.
- 로깅: 시스템 동작 시 시스템 상태/ 작동 정보(로그)를 시간의 경과에 따라 기록하는 것
	=> 로그를 분석하여 비정상 동작을 추적, 사용자 패턴 분석에 이용
	=> Exception 발생, 문제 원인 파악해야 하므로 중요 기능 부분에 로그를 남겨야 함
	=> System.out.println() 명령어는 IO에 대한 리소스를 많이 사용하게 되어 시스템이 느려질 가능성이 있다.
	
- 트랜잭션: DB 상태를 변화시키는 노리적 기능을 수행하기 위한 작업의 단위(ACID)

생명주기 관리: Java 객체의 생성, 소멸을 직접 관리하며 필요한 객체만 사용

ModelAndView : 